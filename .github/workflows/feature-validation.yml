name: Feature Branch Validation

on:
  push:
    branches: 
      - 'feature/**'
  pull_request:
    branches: 
      - develop
    types: [opened, synchronize, reopened]

# Minimal permissions for feature branches
permissions:
  contents: read
  actions: read
  checks: write

jobs:
  validate:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x]  # Only test on latest Node for features
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run type checking
      run: npx tsc --noEmit
    
    - name: Run unit tests
      run: npm run test:unit
    
    - name: Check build
      run: npm run build
    
    - name: Comment PR with validation results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `## üß™ Feature Validation Results
          
          ‚úÖ **Linting**: Passed
          ‚úÖ **Type Checking**: Passed  
          ‚úÖ **Unit Tests**: Passed
          ‚úÖ **Build**: Successful
          
          üéØ **Ready for review!** This feature branch meets basic quality requirements.
          
          **Next Steps:**
          - [ ] Code review
          - [ ] Integration testing (on merge to develop)
          - [ ] E2E testing (on merge to develop)
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # Branch name validation
  validate-branch-name:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Validate branch name
      run: |
        BRANCH_NAME="${GITHUB_REF#refs/heads/}"
        echo "Validating branch name: $BRANCH_NAME"
        
        # Check if branch name follows convention
        if [[ ! "$BRANCH_NAME" =~ ^feature/[0-9]+-[a-z0-9-]+$ ]]; then
          echo "‚ùå Branch name '$BRANCH_NAME' does not follow convention"
          echo "Expected format: feature/<issue-number>-<description>"
          echo "Example: feature/123-add-card-search"
          exit 1
        fi
        
        echo "‚úÖ Branch name follows convention"

  # Check for large files or unwanted changes
  validate-changes:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check for large files
      run: |
        echo "Checking for large files (>1MB)..."
        find . -type f -size +1M -not -path "./.git/*" -not -path "./node_modules/*" | while read file; do
          echo "‚ùå Large file detected: $file"
          exit 1
        done || {
          echo "‚ùå Large files found. Please use Git LFS or remove large files."
          exit 1
        }
        echo "‚úÖ No large files detected"
    
    - name: Check for secrets
      run: |
        echo "Checking for potential secrets..."
        if grep -r -E "(password|secret|key|token)" --include="*.js" --include="*.ts" --include="*.json" --exclude-dir=node_modules .; then
          echo "‚ùå Potential secrets detected. Please review files above."
          exit 1
        fi
        echo "‚úÖ No obvious secrets detected"
    
    - name: Validate commit messages
      run: |
        echo "Validating commit messages..."
        git log --format="%s" origin/develop..HEAD | while read commit_msg; do
          if [[ ! "$commit_msg" =~ ^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: .+ ]]; then
            echo "‚ùå Invalid commit message: $commit_msg"
            echo "Expected format: type(scope): description"
            echo "Types: feat, fix, docs, style, refactor, test, chore"
            exit 1
          fi
        done
        echo "‚úÖ All commit messages follow convention"